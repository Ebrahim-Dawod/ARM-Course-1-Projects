
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000920  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa8  08000ab0  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000aa8  08000aa8  00001ab0  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa8  08000aa8  00001ab0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa8  08000ab0  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00001aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000aac  08000aac  00001aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001ab0  2**0
                  CONTENTS
 10 .bss          00000034  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a60  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e2  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021b4  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000131e  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a7c  00000000  00000000  00005e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000f8ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000284  00000000  00000000  0000f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0000fb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a90 	.word	0x08000a90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a90 	.word	0x08000a90

080001c8 <main>:
static GPIO_Handle_t GpioLed , GpioButton ; // defined it as global Variables to be Accessed by the ISR Function ("static" to be accessed by the functions inside this c file only)



int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	// clearing / initializing GpioLed , GpioButton (if not cleared/initialized it will carry Garbage value and send it to the registers then corrupt registers values)

	memset(&GpioLed/*access this memory Address to change its value*/ ,0/*set its value to 0*/,sizeof(GpioLed)/*the size of memory that need to be cleared with reference to the Given address*/);
 80001cc:	220c      	movs	r2, #12
 80001ce:	2100      	movs	r1, #0
 80001d0:	4820      	ldr	r0, [pc, #128]	@ (8000254 <main+0x8c>)
 80001d2:	f000 fc31 	bl	8000a38 <memset>
	memset(&GpioButton/*access this memory Address to change its value*/ ,0/*set its value to 0*/,sizeof(GpioButton)/*the size of memory that need to be cleared with reference to the Given address*/);
 80001d6:	220c      	movs	r2, #12
 80001d8:	2100      	movs	r1, #0
 80001da:	481f      	ldr	r0, [pc, #124]	@ (8000258 <main+0x90>)
 80001dc:	f000 fc2c 	bl	8000a38 <memset>


	/* Configuration & initialization of the Externally connected LED with the +5v line of the stm board through external current limiting resistor */

	GpioLed.pGPIOx = GPIOD ;
 80001e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000254 <main+0x8c>)
 80001e2:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <main+0x94>)
 80001e4:	601a      	str	r2, [r3, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUMBER_12 ;
 80001e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000254 <main+0x8c>)
 80001e8:	220c      	movs	r2, #12
 80001ea:	711a      	strb	r2, [r3, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT ;
 80001ec:	4b19      	ldr	r3, [pc, #100]	@ (8000254 <main+0x8c>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	715a      	strb	r2, [r3, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PUSH_PULL ;
 80001f2:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <main+0x8c>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	721a      	strb	r2, [r3, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERY_HIGH ;
 80001f8:	4b16      	ldr	r3, [pc, #88]	@ (8000254 <main+0x8c>)
 80001fa:	2203      	movs	r2, #3
 80001fc:	719a      	strb	r2, [r3, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_INTERNAL_PULL_UP_PULL_DOWN;
 80001fe:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <main+0x8c>)
 8000200:	2200      	movs	r2, #0
 8000202:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GpioLed.pGPIOx , ENABLE ); 			// Enabling the Clock of GPIO Port D
 8000204:	4b13      	ldr	r3, [pc, #76]	@ (8000254 <main+0x8c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2101      	movs	r1, #1
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f880 	bl	8000310 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);		// Initiate the GPIO Registers
 8000210:	4810      	ldr	r0, [pc, #64]	@ (8000254 <main+0x8c>)
 8000212:	f000 f965 	bl	80004e0 <GPIO_Init>



	/* Configuration & initialization of the External Button Connected with Software Activated Internal (inside MCU ) Pull-Up Configuration   */

	GpioButton.pGPIOx = GPIOD ;
 8000216:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <main+0x90>)
 8000218:	4a10      	ldr	r2, [pc, #64]	@ (800025c <main+0x94>)
 800021a:	601a      	str	r2, [r3, #0]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUMBER_5 ;
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <main+0x90>)
 800021e:	2205      	movs	r2, #5
 8000220:	711a      	strb	r2, [r3, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000222:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <main+0x90>)
 8000224:	2200      	movs	r2, #0
 8000226:	715a      	strb	r2, [r3, #5]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_INTERNAL_PULL_UP ;
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <main+0x90>)
 800022a:	2201      	movs	r2, #1
 800022c:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GpioButton.pGPIOx , ENABLE );
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <main+0x90>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2101      	movs	r1, #1
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f86b 	bl	8000310 <GPIO_PeriClockControl>
	GPIO_Init(&GpioButton);
 800023a:	4807      	ldr	r0, [pc, #28]	@ (8000258 <main+0x90>)
 800023c:	f000 f950 	bl	80004e0 <GPIO_Init>

	// IRQ Configuration
	GPIO_IRQInterruptConfig(IRQ_NUMBER_EXTI5_9, ENABLE);
 8000240:	2101      	movs	r1, #1
 8000242:	2017      	movs	r0, #23
 8000244:	f000 fb2e 	bl	80008a4 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(IRQ_NUMBER_EXTI5_9, NVIC_IRQ_PRIORITY_15);
 8000248:	210f      	movs	r1, #15
 800024a:	2017      	movs	r0, #23
 800024c:	f000 fbb0 	bl	80009b0 <GPIO_IRQPriorityConfig>



	while(1);
 8000250:	bf00      	nop
 8000252:	e7fd      	b.n	8000250 <main+0x88>
 8000254:	2000001c 	.word	0x2000001c
 8000258:	20000028 	.word	0x20000028
 800025c:	40020c00 	.word	0x40020c00

08000260 <delay>:
}



void delay(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
	for(uint32_t counter = 0 ; counter< 500000/2 ; counter++);
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	e002      	b.n	8000272 <delay+0x12>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a04      	ldr	r2, [pc, #16]	@ (8000288 <delay+0x28>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d9f8      	bls.n	800026c <delay+0xc>


}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	0003d08f 	.word	0x0003d08f

0800028c <EXTI9_5_IRQHandler>:


// ISR Implementation

void EXTI9_5_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

	//Interrupt Handling
	GPIO_IRQHandling(GpioButton.GPIO_PinConfig.GPIO_PinNumber);
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <EXTI9_5_IRQHandler+0x28>)
 8000292:	791b      	ldrb	r3, [r3, #4]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fbaf 	bl	80009f8 <GPIO_IRQHandling>

	// write your ISR Code here

	delay(); // to de-bounce the noisy actions of a button Press/release transitions
 800029a:	f7ff ffe1 	bl	8000260 <delay>
	// Toggle the on Board Green LED (for each button interrupt)
	GPIO_ToggleOutputPin(GpioLed.pGPIOx, GpioLed.GPIO_PinConfig.GPIO_PinNumber);
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <EXTI9_5_IRQHandler+0x2c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <EXTI9_5_IRQHandler+0x2c>)
 80002a4:	7912      	ldrb	r2, [r2, #4]
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fae5 	bl	8000878 <GPIO_ToggleOutputPin>


}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028
 80002b8:	2000001c 	.word	0x2000001c

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	@ (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	@ (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	@ (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fbad 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff6b 	bl	80001c8 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	20000034 	.word	0x20000034

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <GPIO_PeriClockControl>:
 * @note			- none
 *
 * */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx , uint8_t ClockEnOrDi)		/* to Enable/Disable the Peripheral Clock for a given GPIO Base Address  */
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]

	if (ClockEnOrDi == ENABLE)
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d162      	bne.n	80003e8 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a64      	ldr	r2, [pc, #400]	@ (80004b8 <GPIO_PeriClockControl+0x1a8>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800032a:	4b64      	ldr	r3, [pc, #400]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032e:	4a63      	ldr	r2, [pc, #396]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6313      	str	r3, [r2, #48]	@ 0x30


	}//End of else


} // End of Function
 8000336:	e0b9      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a61      	ldr	r2, [pc, #388]	@ (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000340:	4b5e      	ldr	r3, [pc, #376]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000344:	4a5d      	ldr	r2, [pc, #372]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 800034c:	e0ae      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a5c      	ldr	r2, [pc, #368]	@ (80004c4 <GPIO_PeriClockControl+0x1b4>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000356:	4b59      	ldr	r3, [pc, #356]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a58      	ldr	r2, [pc, #352]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000362:	e0a3      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a58      	ldr	r2, [pc, #352]	@ (80004c8 <GPIO_PeriClockControl+0x1b8>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800036c:	4b53      	ldr	r3, [pc, #332]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a52      	ldr	r2, [pc, #328]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000378:	e098      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a53      	ldr	r2, [pc, #332]	@ (80004cc <GPIO_PeriClockControl+0x1bc>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000382:	4b4e      	ldr	r3, [pc, #312]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000386:	4a4d      	ldr	r2, [pc, #308]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000388:	f043 0310 	orr.w	r3, r3, #16
 800038c:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 800038e:	e08d      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a4f      	ldr	r2, [pc, #316]	@ (80004d0 <GPIO_PeriClockControl+0x1c0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000398:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a47      	ldr	r2, [pc, #284]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 80003a4:	e082      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a4a      	ldr	r2, [pc, #296]	@ (80004d4 <GPIO_PeriClockControl+0x1c4>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ae:	4b43      	ldr	r3, [pc, #268]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b2:	4a42      	ldr	r2, [pc, #264]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b8:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 80003ba:	e077      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a46      	ldr	r2, [pc, #280]	@ (80004d8 <GPIO_PeriClockControl+0x1c8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003c4:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a3c      	ldr	r2, [pc, #240]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 80003d0:	e06c      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a41      	ldr	r2, [pc, #260]	@ (80004dc <GPIO_PeriClockControl+0x1cc>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d168      	bne.n	80004ac <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003da:	4b38      	ldr	r3, [pc, #224]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003de:	4a37      	ldr	r2, [pc, #220]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e4:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 80003e6:	e061      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a33      	ldr	r2, [pc, #204]	@ (80004b8 <GPIO_PeriClockControl+0x1a8>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80003f0:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f4:	4a31      	ldr	r2, [pc, #196]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 80003fc:	e056      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2f      	ldr	r2, [pc, #188]	@ (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000406:	4b2d      	ldr	r3, [pc, #180]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800040c:	f023 0302 	bic.w	r3, r3, #2
 8000410:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000412:	e04b      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a2b      	ldr	r2, [pc, #172]	@ (80004c4 <GPIO_PeriClockControl+0x1b4>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000420:	4a26      	ldr	r2, [pc, #152]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000422:	f023 0304 	bic.w	r3, r3, #4
 8000426:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000428:	e040      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a26      	ldr	r2, [pc, #152]	@ (80004c8 <GPIO_PeriClockControl+0x1b8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000432:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000436:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000438:	f023 0308 	bic.w	r3, r3, #8
 800043c:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 800043e:	e035      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a22      	ldr	r2, [pc, #136]	@ (80004cc <GPIO_PeriClockControl+0x1bc>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044c:	4a1b      	ldr	r2, [pc, #108]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000454:	e02a      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a1d      	ldr	r2, [pc, #116]	@ (80004d0 <GPIO_PeriClockControl+0x1c0>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800045e:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000462:	4a16      	ldr	r2, [pc, #88]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000464:	f023 0320 	bic.w	r3, r3, #32
 8000468:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 800046a:	e01f      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a19      	ldr	r2, [pc, #100]	@ (80004d4 <GPIO_PeriClockControl+0x1c4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000478:	4a10      	ldr	r2, [pc, #64]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800047a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800047e:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000480:	e014      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <GPIO_PeriClockControl+0x1c8>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048e:	4a0b      	ldr	r2, [pc, #44]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000490:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000494:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 8000496:	e009      	b.n	80004ac <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a10      	ldr	r2, [pc, #64]	@ (80004dc <GPIO_PeriClockControl+0x1cc>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d105      	bne.n	80004ac <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <GPIO_PeriClockControl+0x1ac>)
 80004a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004aa:	6313      	str	r3, [r2, #48]	@ 0x30
} // End of Function
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40021400 	.word	0x40021400
 80004d4:	40021800 	.word	0x40021800
 80004d8:	40021c00 	.word	0x40021c00
 80004dc:	40022000 	.word	0x40022000

080004e0 <GPIO_Init>:
 * */



void GPIO_Init(GPIO_Handle_t *pGPIOHandle) /* Initialize the Registers of a given GPIO Peripheral */
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;  // temp. Register
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]


	//1. Configure the mode of the GPIO

	//select only non interrupt modes
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d820      	bhi.n	8000536 <GPIO_Init+0x56>
	{

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /* PinMode Value (Given by the user) is left shifted by (PinNumber *2) */  /* multiply by 2 because in MODER Register, each pin takes 2 bit field */
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(RESET_MASK_2_BIT << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));// RESET 2 Bits (to ensure that 2 bits are cleared )
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	400a      	ands	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=  temp; //SET
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e0e4      	b.n	8000700 <GPIO_Init+0x220>


	else   // select Interrupt modes
	{

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d117      	bne.n	800056e <GPIO_Init+0x8e>
		{
			// 1. Configure (Set the interrupt bit)the FTSR (Falling edge trigger selection register)
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800053e:	4b4b      	ldr	r3, [pc, #300]	@ (800066c <GPIO_Init+0x18c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	4611      	mov	r1, r2
 800054e:	4a47      	ldr	r2, [pc, #284]	@ (800066c <GPIO_Init+0x18c>)
 8000550:	430b      	orrs	r3, r1
 8000552:	60d3      	str	r3, [r2, #12]
			//Clearing the Corresponding bit in RTSR Register (Optional)(just to ensure that it's not Activated)
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000554:	4b45      	ldr	r3, [pc, #276]	@ (800066c <GPIO_Init+0x18c>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	43d2      	mvns	r2, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a41      	ldr	r2, [pc, #260]	@ (800066c <GPIO_Init+0x18c>)
 8000568:	400b      	ands	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
 800056c:	e035      	b.n	80005da <GPIO_Init+0xfa>


		}
		else if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d117      	bne.n	80005a6 <GPIO_Init+0xc6>
		{
			// 1. Configure (Set the interrupt bit) in the RTSR (Rising Edge trigger selection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <GPIO_Init+0x18c>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a39      	ldr	r2, [pc, #228]	@ (800066c <GPIO_Init+0x18c>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6093      	str	r3, [r2, #8]
			// Clearing the Corresponding bit in FTSR Register (Optional)(just to ensure that it's not Activated)
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b37      	ldr	r3, [pc, #220]	@ (800066c <GPIO_Init+0x18c>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	43d2      	mvns	r2, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a33      	ldr	r2, [pc, #204]	@ (800066c <GPIO_Init+0x18c>)
 80005a0:	400b      	ands	r3, r1
 80005a2:	60d3      	str	r3, [r2, #12]
 80005a4:	e019      	b.n	80005da <GPIO_Init+0xfa>


		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d115      	bne.n	80005da <GPIO_Init+0xfa>
		{
			// 1. Configure (SET the interrupt bit) in both FTSR & RTSR registers
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ae:	4b2f      	ldr	r3, [pc, #188]	@ (800066c <GPIO_Init+0x18c>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <GPIO_Init+0x18c>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <GPIO_Init+0x18c>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a25      	ldr	r2, [pc, #148]	@ (800066c <GPIO_Init+0x18c>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	6093      	str	r3, [r2, #8]

		}

		// 2. Configure the GPIO port & pin selection in SYSCFG_EXTICR register

		uint8_t SYSCFG_EXTICR_register_selector		=  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;  // selecting the  SYSCFG_EXTICR register from EXTICR[4] array
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	089b      	lsrs	r3, r3, #2
 80005e0:	72fb      	strb	r3, [r7, #11]
		uint8_t SYSCFG_EXTICR_bit_selector			=  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4 ;	 // selecting the start bit to write the port code in the EXTICR register
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	f003 0303 	and.w	r3, r3, #3
 80005ea:	72bb      	strb	r3, [r7, #10]
		uint8_t port_code = GPIO_BASEADDR_TO_PORT_CODE( pGPIOHandle->pGPIOx );  //Calculating the port code (0 for port A , 1 for port B , 2 for port C , ..etc ) to be selected
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <GPIO_Init+0x190>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d04e      	beq.n	8000694 <GPIO_Init+0x1b4>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <GPIO_Init+0x194>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d032      	beq.n	8000666 <GPIO_Init+0x186>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <GPIO_Init+0x198>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d02b      	beq.n	8000662 <GPIO_Init+0x182>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <GPIO_Init+0x19c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d024      	beq.n	800065e <GPIO_Init+0x17e>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <GPIO_Init+0x1a0>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d01d      	beq.n	800065a <GPIO_Init+0x17a>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <GPIO_Init+0x1a4>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d016      	beq.n	8000656 <GPIO_Init+0x176>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a16      	ldr	r2, [pc, #88]	@ (8000688 <GPIO_Init+0x1a8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d00f      	beq.n	8000652 <GPIO_Init+0x172>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a15      	ldr	r2, [pc, #84]	@ (800068c <GPIO_Init+0x1ac>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d008      	beq.n	800064e <GPIO_Init+0x16e>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <GPIO_Init+0x1b0>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d101      	bne.n	800064a <GPIO_Init+0x16a>
 8000646:	2308      	movs	r3, #8
 8000648:	e025      	b.n	8000696 <GPIO_Init+0x1b6>
 800064a:	2300      	movs	r3, #0
 800064c:	e023      	b.n	8000696 <GPIO_Init+0x1b6>
 800064e:	2307      	movs	r3, #7
 8000650:	e021      	b.n	8000696 <GPIO_Init+0x1b6>
 8000652:	2306      	movs	r3, #6
 8000654:	e01f      	b.n	8000696 <GPIO_Init+0x1b6>
 8000656:	2305      	movs	r3, #5
 8000658:	e01d      	b.n	8000696 <GPIO_Init+0x1b6>
 800065a:	2304      	movs	r3, #4
 800065c:	e01b      	b.n	8000696 <GPIO_Init+0x1b6>
 800065e:	2303      	movs	r3, #3
 8000660:	e019      	b.n	8000696 <GPIO_Init+0x1b6>
 8000662:	2302      	movs	r3, #2
 8000664:	e017      	b.n	8000696 <GPIO_Init+0x1b6>
 8000666:	2301      	movs	r3, #1
 8000668:	e015      	b.n	8000696 <GPIO_Init+0x1b6>
 800066a:	bf00      	nop
 800066c:	40013c00 	.word	0x40013c00
 8000670:	40020000 	.word	0x40020000
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00
 8000680:	40021000 	.word	0x40021000
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40022000 	.word	0x40022000
 8000694:	2300      	movs	r3, #0
 8000696:	727b      	strb	r3, [r7, #9]

		// Enabling SYSCFG clock
		SYSCFG_PCLK_EN();
 8000698:	4b74      	ldr	r3, [pc, #464]	@ (800086c <GPIO_Init+0x38c>)
 800069a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069c:	4a73      	ldr	r2, [pc, #460]	@ (800086c <GPIO_Init+0x38c>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6453      	str	r3, [r2, #68]	@ 0x44

		// Selecting the port & pin that produce the interrupt
		SYSCFG->EXTICR[SYSCFG_EXTICR_register_selector] &= ~( port_code <<  SYSCFG_EXTICR_bit_selector * 4 ); // clear the bits first
 80006a4:	4a72      	ldr	r2, [pc, #456]	@ (8000870 <GPIO_Init+0x390>)
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	3302      	adds	r3, #2
 80006aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ae:	7a79      	ldrb	r1, [r7, #9]
 80006b0:	7abb      	ldrb	r3, [r7, #10]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	496c      	ldr	r1, [pc, #432]	@ (8000870 <GPIO_Init+0x390>)
 80006be:	7afb      	ldrb	r3, [r7, #11]
 80006c0:	4002      	ands	r2, r0
 80006c2:	3302      	adds	r3, #2
 80006c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[SYSCFG_EXTICR_register_selector] |=  ( port_code <<  SYSCFG_EXTICR_bit_selector * 4 ); // set the required bits
 80006c8:	4a69      	ldr	r2, [pc, #420]	@ (8000870 <GPIO_Init+0x390>)
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	3302      	adds	r3, #2
 80006ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d2:	7a79      	ldrb	r1, [r7, #9]
 80006d4:	7abb      	ldrb	r3, [r7, #10]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	4964      	ldr	r1, [pc, #400]	@ (8000870 <GPIO_Init+0x390>)
 80006e0:	7afb      	ldrb	r3, [r7, #11]
 80006e2:	4302      	orrs	r2, r0
 80006e4:	3302      	adds	r3, #2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		// 3. Enable the interrupt delivery on the EXTI line corresponding to the pin number provided using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // make Interrupt request from line x is not masked
 80006ea:	4b62      	ldr	r3, [pc, #392]	@ (8000874 <GPIO_Init+0x394>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	7912      	ldrb	r2, [r2, #4]
 80006f2:	4611      	mov	r1, r2
 80006f4:	2201      	movs	r2, #1
 80006f6:	408a      	lsls	r2, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a5e      	ldr	r2, [pc, #376]	@ (8000874 <GPIO_Init+0x394>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]


	////////////////////////////////////////////////////////////////////////////////////////

	//2. Configure the speed (Slew Rate)
	temp =0; // resetting temp variable content to be ready for another use
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	799b      	ldrb	r3, [r3, #6]
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(RESET_MASK_2_BIT << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));// RESET 2 Bits (to ensure that 2 bits are cleared )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	689a      	ldr	r2, [r3, #8]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	2103      	movs	r1, #3
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	400a      	ands	r2, r1
 8000732:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp ; //SET
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6899      	ldr	r1, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	430a      	orrs	r2, r1
 8000742:	609a      	str	r2, [r3, #8]

	/////////////////////////////////////////////////////////////////////////////////////////////////

	//3. Configure the Pull-up & Pull-Down Settings
	temp =0; // resetting temp variable content to be ready for another use
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	79db      	ldrb	r3, [r3, #7]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(RESET_MASK_2_BIT<<( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // RESET 2 Bits (to ensure that 2 bits are cleared )
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2103      	movs	r1, #3
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	4619      	mov	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	400a      	ands	r2, r1
 8000776:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=  temp; //SET
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	68d9      	ldr	r1, [r3, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	430a      	orrs	r2, r1
 8000786:	60da      	str	r2, [r3, #12]

	////////////////////////////////////////////////////////////////////////////////////////////////

	//4. Configure the Output Type
	temp =0; // resetting temp variable content to be ready for another use
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ; /* PinOPType Value (Given by the user) is left shifted by (PinNumber )  */  /* we didn't multiply because in OTYPER Register, each pin takes 1 bit field */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7a1b      	ldrb	r3, [r3, #8]
 8000790:	461a      	mov	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	// RESET 1 Bit (to ensure that this bit is cleared )
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	4619      	mov	r1, r3
 80007a8:	2301      	movs	r3, #1
 80007aa:	408b      	lsls	r3, r1
 80007ac:	43db      	mvns	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	400a      	ands	r2, r1
 80007b6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=  temp ; //SET
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6859      	ldr	r1, [r3, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]

	////////////////////////////////////////////////////////////////////////////////////////////////

	//5. Configure the Alternate Functionality
	temp =0; // resetting temp variable content to be ready for another use
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d144      	bne.n	800085e <GPIO_Init+0x37e>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NUMBER_7 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	d820      	bhi.n	800081e <GPIO_Init+0x33e>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  /* PinAltFunMode Value (Given by the user) is left shifted by (PinNumber * 4)  */  /* multiply by 4 because in AFRL Register, each pin takes 4 bit field */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	461a      	mov	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &=  ~(RESET_MASK_4_BIT << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ; // RESET 4 Bits (to ensure that 4 bits are cleared )
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a1a      	ldr	r2, [r3, #32]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	210f      	movs	r1, #15
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	400a      	ands	r2, r1
 800080a:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |=  temp ;//SET
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6a19      	ldr	r1, [r3, #32]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	430a      	orrs	r2, r1
 800081a:	621a      	str	r2, [r3, #32]
		}// End of else
	}//End of if



} // End of function GPIO_Init()
 800081c:	e01f      	b.n	800085e <GPIO_Init+0x37e>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  /* PinAltFunMode Value (Given by the user) is left shifted by (PinNumber * 4)  */  /* multiply by 4 because in AFRH Register, each pin takes 4 bit field */
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7a5b      	ldrb	r3, [r3, #9]
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(RESET_MASK_4_BIT << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ; // RESET 4 Bits (to ensure that 4 bits are cleared )
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	210f      	movs	r1, #15
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	400a      	ands	r2, r1
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |=  temp ; //SET
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	430a      	orrs	r2, r1
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
} // End of function GPIO_Init()
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40013c00 	.word	0x40013c00

08000878 <GPIO_ToggleOutputPin>:
 *
 * @note			- none
 *
 * */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1<<PinNumber); // XOR-ing the bit value (flip its value)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	78fa      	ldrb	r2, [r7, #3]
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	405a      	eors	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	615a      	str	r2, [r3, #20]

}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <GPIO_IRQInterruptConfig>:
 * @note			- none
 *
 * */

void GPIO_IRQInterruptConfig(uint8_t IRQNumber , uint8_t IRQEnOrDi /* Enable or Disable */)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
	*/

	/*IRQ number = IRQ Position in the NVIC
	 *which is different from IRQ Priority */

	if (IRQEnOrDi == ENABLE ) //if(IRQ is Enabled)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d133      	bne.n	8000922 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber < 32) //IRQNumber values between 0 : 31
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b1f      	cmp	r3, #31
 80008be:	d80a      	bhi.n	80008d6 <GPIO_IRQInterruptConfig+0x32>
		{
			// you have to program NVIC_ISER0 register
			*NVIC_ISER0_BASEADDR |= ( 1 << IRQNumber );
 80008c0:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <GPIO_IRQInterruptConfig+0xf4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f202 	lsl.w	r2, r1, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <GPIO_IRQInterruptConfig+0xf4>)
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
		}

	}//End of else


}//End of function
 80008d4:	e059      	b.n	800098a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64 ) //IRQNumber values between 32 : 63
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b1f      	cmp	r3, #31
 80008da:	d90f      	bls.n	80008fc <GPIO_IRQInterruptConfig+0x58>
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b3f      	cmp	r3, #63	@ 0x3f
 80008e0:	d80c      	bhi.n	80008fc <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1_BASEADDR |= ( 1 << ( IRQNumber % 32 /*Subtract 32 from IRQNumber 32 and above to Start from bit 0 of ISER1 register */ ) );
 80008e2:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <GPIO_IRQInterruptConfig+0xf8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	f002 021f 	and.w	r2, r2, #31
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a29      	ldr	r2, [pc, #164]	@ (800099c <GPIO_IRQInterruptConfig+0xf8>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e046      	b.n	800098a <GPIO_IRQInterruptConfig+0xe6>
		else if ( IRQNumber > 63 && IRQNumber < 96 ) //IRQNumber values between 64 : 96  // STM32F407 MCU Vector Table have only 81 IRQ numbers is implemented , so we only implemented IRQ numbers till 96 (ISER2 & ICER2 registers) not more that
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000900:	d943      	bls.n	800098a <GPIO_IRQInterruptConfig+0xe6>
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b5f      	cmp	r3, #95	@ 0x5f
 8000906:	d840      	bhi.n	800098a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2_BASEADDR |= ( 1 << ( IRQNumber % 64 /*Subtract 64 from IRQNumber 64 and above to Start from bit 0 of ISER2 register */ ) );
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <GPIO_IRQInterruptConfig+0xfc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000912:	2101      	movs	r1, #1
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <GPIO_IRQInterruptConfig+0xfc>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
}//End of function
 8000920:	e033      	b.n	800098a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber < 32) //IRQNumber values between 0 : 31
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b1f      	cmp	r3, #31
 8000926:	d80a      	bhi.n	800093e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0_BASEADDR |= ( 1 << IRQNumber ); //disable IRQ number
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <GPIO_IRQInterruptConfig+0x100>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <GPIO_IRQInterruptConfig+0x100>)
 8000938:	430b      	orrs	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
}//End of function
 800093c:	e025      	b.n	800098a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64 ) //IRQNumber values between 32 : 63
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b1f      	cmp	r3, #31
 8000942:	d90f      	bls.n	8000964 <GPIO_IRQInterruptConfig+0xc0>
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b3f      	cmp	r3, #63	@ 0x3f
 8000948:	d80c      	bhi.n	8000964 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1_BASEADDR |= ( 1 << ( IRQNumber % 32 /*Subtract 32 from IRQNumber 32 and above to Start from bit 0 of ICER1 register */) );
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <GPIO_IRQInterruptConfig+0x104>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	f002 021f 	and.w	r2, r2, #31
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <GPIO_IRQInterruptConfig+0x104>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e012      	b.n	800098a <GPIO_IRQInterruptConfig+0xe6>
		else if ( IRQNumber > 63 && IRQNumber < 96 ) //IRQNumber values between 64 : 96   // STM32F407 MCU Vector Table have only 81 IRQ numbers is implemented , so we only implemented IRQ numbers till 96 (ISER2 & ICER2 registers) not more that
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b3f      	cmp	r3, #63	@ 0x3f
 8000968:	d90f      	bls.n	800098a <GPIO_IRQInterruptConfig+0xe6>
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b5f      	cmp	r3, #95	@ 0x5f
 800096e:	d80c      	bhi.n	800098a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2_BASEADDR |= ( 1 << ( IRQNumber % 64 /*Subtract 64 from IRQNumber 64 and above to Start from bit 0 of ICER2 register */ ) );
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <GPIO_IRQInterruptConfig+0x108>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	4611      	mov	r1, r2
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <GPIO_IRQInterruptConfig+0x108>)
 8000984:	430b      	orrs	r3, r1
 8000986:	6013      	str	r3, [r2, #0]
}//End of function
 8000988:	e7ff      	b.n	800098a <GPIO_IRQInterruptConfig+0xe6>
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000e104 	.word	0xe000e104
 80009a0:	e000e108 	.word	0xe000e108
 80009a4:	e000e180 	.word	0xe000e180
 80009a8:	e000e184 	.word	0xe000e184
 80009ac:	e000e188 	.word	0xe000e188

080009b0 <GPIO_IRQPriorityConfig>:
 * @note			- none
 *
 * */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber , uint32_t IRQPriority )
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
 *
 *
 */

	// 1. first lets find out the IPR register
	uint8_t IPRx_number = IRQNumber / 4 /*divided by 4 because each IPR register has 4 IRQNumber sections */ ; 	// IPRx_number is from 0 : 59	(60 IPR registers)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	73fb      	strb	r3, [r7, #15]

	// to find out the section that corresponds to the IRQNumber
	uint8_t IPRx_section_number = IRQNumber % 4 ;	// IPRx_section is from 0 : 3 	(4 sections each section is 1 Byte)(IPR take 4Bytes = 4 sections)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	73bb      	strb	r3, [r7, #14]

	//(each section (1 Byte) has only its 4 most significant bits available for storing the IRQNumber_PriorityValue )
	uint8_t shift_value = (8/*Multiply 8 bit * section number .. to jump to the required bit in the register  */ * IPRx_section_number) + ( 8/*section size is 8 bits reserved for each IRQNumber*/ - NUMBER_OF_PRIORITY_BITS_IMPLEMENTED);
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	3304      	adds	r3, #4
 80009d2:	737b      	strb	r3, [r7, #13]

	/* de-reference the address to get its value*/
	 *( NVIC_IPR_BASEADDR + ( /*Jump to this offset*/IPRx_number ) ) = (IRQPriority <<  shift_value);
 80009d4:	7b7a      	ldrb	r2, [r7, #13]
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009de:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	601a      	str	r2, [r3, #0]
	 // As you increment a uint32_t pointer it will be incremented by 32bits (4Bytes) Not by 1 Byte , so we shouldn't multiply IPRx_number * 4 in the previous line
}//End of function
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <GPIO_IRQHandling>:
 *
 * @note			- none
 *
 **/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]




	// clear the EXTI_PR (EXTI Pending Register) corresponding to the pin number
	if ( EXTI->PR & (1 << PinNumber) ) // if  the EXTI_PR bit position corresponding to that interrupt pin number is Set (the triggered interrupt is actually pended in EXTI_PR register )
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <GPIO_IRQHandling+0x3c>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <GPIO_IRQHandling+0x30>
	{

		// Clear the Pending Register Bit (By writing 1 : according to STM32F407 Reference Manual )
		EXTI->PR |= (1 << PinNumber);
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <GPIO_IRQHandling+0x3c>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <GPIO_IRQHandling+0x3c>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6153      	str	r3, [r2, #20]

	}// End of if


}// End of function
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40013c00 	.word	0x40013c00

08000a38 <memset>:
 8000a38:	4402      	add	r2, r0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d100      	bne.n	8000a42 <memset+0xa>
 8000a40:	4770      	bx	lr
 8000a42:	f803 1b01 	strb.w	r1, [r3], #1
 8000a46:	e7f9      	b.n	8000a3c <memset+0x4>

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a80 <__libc_init_array+0x38>)
 8000a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a84 <__libc_init_array+0x3c>)
 8000a4e:	1b64      	subs	r4, r4, r5
 8000a50:	10a4      	asrs	r4, r4, #2
 8000a52:	2600      	movs	r6, #0
 8000a54:	42a6      	cmp	r6, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	4d0b      	ldr	r5, [pc, #44]	@ (8000a88 <__libc_init_array+0x40>)
 8000a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a8c <__libc_init_array+0x44>)
 8000a5c:	f000 f818 	bl	8000a90 <_init>
 8000a60:	1b64      	subs	r4, r4, r5
 8000a62:	10a4      	asrs	r4, r4, #2
 8000a64:	2600      	movs	r6, #0
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a70:	4798      	blx	r3
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7a:	4798      	blx	r3
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	08000aa8 	.word	0x08000aa8
 8000a84:	08000aa8 	.word	0x08000aa8
 8000a88:	08000aa8 	.word	0x08000aa8
 8000a8c:	08000aac 	.word	0x08000aac

08000a90 <_init>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr

08000a9c <_fini>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr
